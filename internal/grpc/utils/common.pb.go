// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Aurorachain/go-aoa/internal/grpc/utils/common.proto
package utils
import (
fmt "fmt"
proto "github.com/golang/protobuf/proto"
math "math"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package
type AccountsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *AccountsRequest) Reset()         { *m = AccountsRequest{} }
func (m *AccountsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountsRequest) ProtoMessage()    {}
func (*AccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{0}
}
func (m *AccountsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsRequest.Unmarshal(m, b)
}
func (m *AccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsRequest.Marshal(b, m, deterministic)
}
func (m *AccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsRequest.Merge(m, src)
}
func (m *AccountsRequest) XXX_Size() int {
	return xxx_messageInfo_AccountsRequest.Size(m)
}
func (m *AccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsRequest.DiscardUnknown(m)
}
var xxx_messageInfo_AccountsRequest proto.InternalMessageInfo
type AccountsReply struct {
	Accounts             []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *AccountsReply) Reset()         { *m = AccountsReply{} }
func (m *AccountsReply) String() string { return proto.CompactTextString(m) }
func (*AccountsReply) ProtoMessage()    {}
func (*AccountsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{1}
}
func (m *AccountsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsReply.Unmarshal(m, b)
}
func (m *AccountsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsReply.Marshal(b, m, deterministic)
}
func (m *AccountsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsReply.Merge(m, src)
}
func (m *AccountsReply) XXX_Size() int {
	return xxx_messageInfo_AccountsReply.Size(m)
}
func (m *AccountsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsReply.DiscardUnknown(m)
}
var xxx_messageInfo_AccountsReply proto.InternalMessageInfo
func (m *AccountsReply) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}
type TransactionRequest struct {
	BlockNumber          int64    `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Index                uint64   `protobuf:"fixed64,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *TransactionRequest) Reset()         { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()    {}
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{2}
}
func (m *TransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionRequest.Unmarshal(m, b)
}
func (m *TransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionRequest.Marshal(b, m, deterministic)
}
func (m *TransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest.Merge(m, src)
}
func (m *TransactionRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionRequest.Size(m)
}
func (m *TransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest.DiscardUnknown(m)
}
var xxx_messageInfo_TransactionRequest proto.InternalMessageInfo
func (m *TransactionRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}
func (m *TransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}
func (m *TransactionRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}
type RpcTransaction struct {
	//    BlockHash        common.Hash      `json:"blockHash"`
	//    BlockNumber      *hexutil.Big     `json:"blockNumber"`
	//    From             common.Address   `json:"from"`
	//    Gas              hexutil.Uint64   `json:"gas"`
	//    GasPrice         *hexutil.Big     `json:"gasPrice"`
	//    Hash             common.Hash      `json:"hash"`
	//    Input            hexutil.Bytes    `json:"input"`
	//    Nonce            hexutil.Uint64   `json:"nonce"`
	//    To               *common.Address  `json:"to"`
	//    TransactionIndex hexutil.Uint     `json:"transactionIndex"`
	//    Value            *hexutil.Big     `json:"value"`
	//    V                *hexutil.Big     `json:"v"`
	//    R                *hexutil.Big     `json:"r"`
	//    S                *hexutil.Big     `json:"s"`
	//    Action           uint64           `json:"action"`
	//    Votes            []types.Vote     `json:"votes,omitempty"`
	//    Nickname         string           `json:"nickname,omitempty"`
	//    Asset            *common.Address  `json:"asset,omitempty"`
	//    AssetInfo        *SendTxAssetInfo `json:"assetInfo,omitempty"`
	//    SubAddress       string           `json:"subAddress,omitempty"`
	//    Abi              string           `json:"abi,omitempty"`
	BlockHash            string           `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockNumber          []byte           `protobuf:"bytes,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	From                 string           `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Gas                  uint64           `protobuf:"fixed64,4,opt,name=Gas,json=gas,proto3" json:"Gas,omitempty"`
	GasPrice             []byte           `protobuf:"bytes,5,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	Hash                 string           `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Input                []byte           `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Nonce                uint64           `protobuf:"fixed64,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To                   string           `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
	TransactionIndex     uint64           `protobuf:"fixed64,10,opt,name=TransactionIndex,json=transactionIndex,proto3" json:"TransactionIndex,omitempty"`
	Value                []byte           `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
	V                    []byte           `protobuf:"bytes,12,opt,name=v,proto3" json:"v,omitempty"`
	R                    []byte           `protobuf:"bytes,13,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte           `protobuf:"bytes,14,opt,name=s,proto3" json:"s,omitempty"`
	Action               uint64           `protobuf:"fixed64,15,opt,name=action,proto3" json:"action,omitempty"`
	Votes                []*Vote          `protobuf:"bytes,16,rep,name=votes,proto3" json:"votes,omitempty"`
	Nickname             string           `protobuf:"bytes,17,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Asset                string           `protobuf:"bytes,18,opt,name=asset,proto3" json:"asset,omitempty"`
	AssetInfo            *SendTxAssetInfo `protobuf:"bytes,19,opt,name=assetInfo,proto3" json:"assetInfo,omitempty"`
	SubAddress           string           `protobuf:"bytes,20,opt,name=subAddress,proto3" json:"subAddress,omitempty"`
	Abi                  string           `protobuf:"bytes,21,opt,name=abi,proto3" json:"abi,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}
func (m *RpcTransaction) Reset()         { *m = RpcTransaction{} }
func (m *RpcTransaction) String() string { return proto.CompactTextString(m) }
func (*RpcTransaction) ProtoMessage()    {}
func (*RpcTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{3}
}
func (m *RpcTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcTransaction.Unmarshal(m, b)
}
func (m *RpcTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcTransaction.Marshal(b, m, deterministic)
}
func (m *RpcTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcTransaction.Merge(m, src)
}
func (m *RpcTransaction) XXX_Size() int {
	return xxx_messageInfo_RpcTransaction.Size(m)
}
func (m *RpcTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcTransaction.DiscardUnknown(m)
}
var xxx_messageInfo_RpcTransaction proto.InternalMessageInfo
func (m *RpcTransaction) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}
func (m *RpcTransaction) GetBlockNumber() []byte {
	if m != nil {
		return m.BlockNumber
	}
	return nil
}
func (m *RpcTransaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}
func (m *RpcTransaction) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}
func (m *RpcTransaction) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}
func (m *RpcTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}
func (m *RpcTransaction) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}
func (m *RpcTransaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}
func (m *RpcTransaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}
func (m *RpcTransaction) GetTransactionIndex() uint64 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}
func (m *RpcTransaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}
func (m *RpcTransaction) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}
func (m *RpcTransaction) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}
func (m *RpcTransaction) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}
func (m *RpcTransaction) GetAction() uint64 {
	if m != nil {
		return m.Action
	}
	return 0
}
func (m *RpcTransaction) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}
func (m *RpcTransaction) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}
func (m *RpcTransaction) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}
func (m *RpcTransaction) GetAssetInfo() *SendTxAssetInfo {
	if m != nil {
		return m.AssetInfo
	}
	return nil
}
func (m *RpcTransaction) GetSubAddress() string {
	if m != nil {
		return m.SubAddress
	}
	return ""
}
func (m *RpcTransaction) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}
type Transaction struct {
	//data txdata
	//// caches
	//hash       atomic.Value
	//size       atomic.Value
	//from       atomic.Value
	//isContract atomic.Value
	TxData *TxData `protobuf:"bytes,1,opt,name=txData,proto3" json:"txData,omitempty"`
	//caches
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Size                 int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	From                 string   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	IsContract           bool     `protobuf:"varint,5,opt,name=isContract,proto3" json:"isContract,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{4}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}
var xxx_messageInfo_Transaction proto.InternalMessageInfo
func (m *Transaction) GetTxData() *TxData {
	if m != nil {
		return m.TxData
	}
	return nil
}
func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}
func (m *Transaction) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}
func (m *Transaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}
func (m *Transaction) GetIsContract() bool {
	if m != nil {
		return m.IsContract
	}
	return false
}
type TxData struct {
	//AccountNonce uint64          `json:"nonce"    gencodec:"required"`
	//Price        *big.Int        `json:"gasPrice" gencodec:"required"`
	//GasLimit     uint64          `json:"gas"      gencodec:"required"`
	//Recipient    *common.Address `json:"to"       rlp:"nil"` // nil means contract creation
	//Amount       *big.Int        `json:"value"    gencodec:"required"`
	//Payload      []byte          `json:"input"    gencodec:"required"`
	//
	//Action   uint64 `json:"action"  gencodec:"required"` // 参见当前包（当前文件）ActionXXX 常量定义
	//Vote     []byte `json:"vote" rlp:"nil"`
	//Nickname []byte `json:"nickname" rlp:"nil"`
	//
	////资产符号，作为资产的唯一标识。当Action 为ActionTrans时有意义。
	//Asset *common.Address `json:"asset,omitempty" rlp:"nil"`
	////资产信息，当Action 为 ActionPublishAsset 时有意义
	//AssetInfo []byte `json:"assetInfo,omitempty" rlp:"nil"`
	////子地址，做归集资金使用
	//SubAddress string `json:"subAddress,omitempty" rlp:"nil"`
	//// When create a contract, user can offer the ABI so that it can store on the block
	//Abi string `json:"abi,omitempty" rlp:"nil"`
	//
	//// Signature values
	//V *big.Int `json:"v" gencodec:"required"` // chainId
	//R *big.Int `json:"r" gencodec:"required"`
	//S *big.Int `json:"s" gencodec:"required"`
	//
	//// This is only used when marshaling to JSON.
	//Hash *common.Hash `json:"hash" rlp:"-"`
	AccountNonce         uint64   `protobuf:"fixed64,1,opt,name=accountNonce,proto3" json:"accountNonce,omitempty"`
	Price                []byte   `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	GasLimit             uint64   `protobuf:"fixed64,3,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	Recipient            string   `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount               []byte   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Payload              []byte   `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Action               uint64   `protobuf:"fixed64,7,opt,name=action,proto3" json:"action,omitempty"`
	Vote                 []byte   `protobuf:"bytes,8,opt,name=vote,proto3" json:"vote,omitempty"`
	Nickname             []byte   `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Asset                string   `protobuf:"bytes,10,opt,name=asset,proto3" json:"asset,omitempty"`
	AssetInfo            []byte   `protobuf:"bytes,11,opt,name=assetInfo,proto3" json:"assetInfo,omitempty"`
	SubAddress           string   `protobuf:"bytes,12,opt,name=subAddress,proto3" json:"subAddress,omitempty"`
	Abi                  string   `protobuf:"bytes,13,opt,name=abi,proto3" json:"abi,omitempty"`
	V                    []byte   `protobuf:"bytes,14,opt,name=v,proto3" json:"v,omitempty"`
	R                    []byte   `protobuf:"bytes,15,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte   `protobuf:"bytes,16,opt,name=s,proto3" json:"s,omitempty"`
	Hash                 string   `protobuf:"bytes,17,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *TxData) Reset()         { *m = TxData{} }
func (m *TxData) String() string { return proto.CompactTextString(m) }
func (*TxData) ProtoMessage()    {}
func (*TxData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{5}
}
func (m *TxData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxData.Unmarshal(m, b)
}
func (m *TxData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxData.Marshal(b, m, deterministic)
}
func (m *TxData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxData.Merge(m, src)
}
func (m *TxData) XXX_Size() int {
	return xxx_messageInfo_TxData.Size(m)
}
func (m *TxData) XXX_DiscardUnknown() {
	xxx_messageInfo_TxData.DiscardUnknown(m)
}
var xxx_messageInfo_TxData proto.InternalMessageInfo
func (m *TxData) GetAccountNonce() uint64 {
	if m != nil {
		return m.AccountNonce
	}
	return 0
}
func (m *TxData) GetPrice() []byte {
	if m != nil {
		return m.Price
	}
	return nil
}
func (m *TxData) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}
func (m *TxData) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}
func (m *TxData) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}
func (m *TxData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}
func (m *TxData) GetAction() uint64 {
	if m != nil {
		return m.Action
	}
	return 0
}
func (m *TxData) GetVote() []byte {
	if m != nil {
		return m.Vote
	}
	return nil
}
func (m *TxData) GetNickname() []byte {
	if m != nil {
		return m.Nickname
	}
	return nil
}
func (m *TxData) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}
func (m *TxData) GetAssetInfo() []byte {
	if m != nil {
		return m.AssetInfo
	}
	return nil
}
func (m *TxData) GetSubAddress() string {
	if m != nil {
		return m.SubAddress
	}
	return ""
}
func (m *TxData) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}
func (m *TxData) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}
func (m *TxData) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}
func (m *TxData) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}
func (m *TxData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}
type Vote struct {
	//    Candidate *common.Address `json:"candidate"`
	//    Operation uint            `json:"operation"` //0,投票;1,取消投票
	Candidate            string   `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	Operation            uint32   `protobuf:"fixed32,2,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{6}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vote.Unmarshal(m, b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return xxx_messageInfo_Vote.Size(m)
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}
var xxx_messageInfo_Vote proto.InternalMessageInfo
func (m *Vote) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}
func (m *Vote) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}
type SendTxAssetInfo struct {
	//Name      string       `json:"name"`
	//Symbol    string       `json:"symbol"`
	//Supply    *hexutil.Big `json:"supply"`
	//Desc      string       `json:"desc"`
	//assetinfo *types.AssetInfo
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol               string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Supply               []byte     `protobuf:"bytes,3,opt,name=supply,proto3" json:"supply,omitempty"`
	Desc                 string     `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	AssetInfo            *AssetInfo `protobuf:"bytes,5,opt,name=assetInfo,proto3" json:"assetInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}
func (m *SendTxAssetInfo) Reset()         { *m = SendTxAssetInfo{} }
func (m *SendTxAssetInfo) String() string { return proto.CompactTextString(m) }
func (*SendTxAssetInfo) ProtoMessage()    {}
func (*SendTxAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{7}
}
func (m *SendTxAssetInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTxAssetInfo.Unmarshal(m, b)
}
func (m *SendTxAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTxAssetInfo.Marshal(b, m, deterministic)
}
func (m *SendTxAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTxAssetInfo.Merge(m, src)
}
func (m *SendTxAssetInfo) XXX_Size() int {
	return xxx_messageInfo_SendTxAssetInfo.Size(m)
}
func (m *SendTxAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTxAssetInfo.DiscardUnknown(m)
}
var xxx_messageInfo_SendTxAssetInfo proto.InternalMessageInfo
func (m *SendTxAssetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}
func (m *SendTxAssetInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}
func (m *SendTxAssetInfo) GetSupply() []byte {
	if m != nil {
		return m.Supply
	}
	return nil
}
func (m *SendTxAssetInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}
func (m *SendTxAssetInfo) GetAssetInfo() *AssetInfo {
	if m != nil {
		return m.AssetInfo
	}
	return nil
}
type AssetInfo struct {
	//    Issuer *common.Address `json:"issuer,omitempty" rlp:"nil"`
	//    Name   string          `json:"name"`
	//    Symbol string          `json:"symbol"`
	//    Supply *big.Int        `json:"supply"`
	//    Desc   string          `json:"desc"`
	Issuer               string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol               string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Supply               []byte   `protobuf:"bytes,4,opt,name=supply,proto3" json:"supply,omitempty"`
	Desc                 string   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}
func (m *AssetInfo) Reset()         { *m = AssetInfo{} }
func (m *AssetInfo) String() string { return proto.CompactTextString(m) }
func (*AssetInfo) ProtoMessage()    {}
func (*AssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{8}
}
func (m *AssetInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetInfo.Unmarshal(m, b)
}
func (m *AssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetInfo.Marshal(b, m, deterministic)
}
func (m *AssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetInfo.Merge(m, src)
}
func (m *AssetInfo) XXX_Size() int {
	return xxx_messageInfo_AssetInfo.Size(m)
}
func (m *AssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetInfo.DiscardUnknown(m)
}
var xxx_messageInfo_AssetInfo proto.InternalMessageInfo
func (m *AssetInfo) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}
func (m *AssetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}
func (m *AssetInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}
func (m *AssetInfo) GetSupply() []byte {
	if m != nil {
		return m.Supply
	}
	return nil
}
func (m *AssetInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}
type SendTx struct {
	//From     common.Address  `json:"from"`
	//To       string          `json:"to"`
	//Gas      *hexutil.Uint64 `json:"gas"`
	//GasPrice *hexutil.Big    `json:"gasPrice"`
	//Value    *hexutil.Big    `json:"value"`
	//Nonce    *hexutil.Uint64 `json:"nonce"`
	//// We accept "data" and "input" for backwards-compatibility reasons. "input" is the
	//// newer name and should be preferred by clients.
	//Data       *hexutil.Bytes   `json:"data"`
	//Input      *hexutil.Bytes   `json:"input"`
	//Action     uint64           `json:"action"`
	//Vote       []types.Vote     `json:"vote"`
	//Nickname   string           `json:"nickname"`
	//Asset      *common.Address  `json:"asset"`
	//AssetInfo  *SendTxAssetInfo `json:"assetInfo,omitempty"`
	//SubAddress string           `json:"subAddress,omitempty"`
	//Abi        string           `json:"abi,omitempty"`
	From                 string           `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   string           `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Gas                  uint64           `protobuf:"fixed64,3,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice             []byte           `protobuf:"bytes,4,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	Value                []byte           `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Nonce                uint64           `protobuf:"fixed64,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Data                 []byte           `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Input                []byte           `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	Action               uint64           `protobuf:"fixed64,9,opt,name=action,proto3" json:"action,omitempty"`
	Vote                 []*Vote          `protobuf:"bytes,10,rep,name=vote,proto3" json:"vote,omitempty"`
	Nickname             string           `protobuf:"bytes,11,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Asset                string           `protobuf:"bytes,12,opt,name=asset,proto3" json:"asset,omitempty"`
	AssetInfo            *SendTxAssetInfo `protobuf:"bytes,13,opt,name=assetInfo,proto3" json:"assetInfo,omitempty"`
	SubAddress           string           `protobuf:"bytes,14,opt,name=subAddress,proto3" json:"subAddress,omitempty"`
	Abi                  string           `protobuf:"bytes,15,opt,name=abi,proto3" json:"abi,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}
func (m *SendTx) Reset()         { *m = SendTx{} }
func (m *SendTx) String() string { return proto.CompactTextString(m) }
func (*SendTx) ProtoMessage()    {}
func (*SendTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_23eeae889888c9b6, []int{9}
}
func (m *SendTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTx.Unmarshal(m, b)
}
func (m *SendTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTx.Marshal(b, m, deterministic)
}
func (m *SendTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTx.Merge(m, src)
}
func (m *SendTx) XXX_Size() int {
	return xxx_messageInfo_SendTx.Size(m)
}
func (m *SendTx) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTx.DiscardUnknown(m)
}
var xxx_messageInfo_SendTx proto.InternalMessageInfo
func (m *SendTx) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}
func (m *SendTx) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}
func (m *SendTx) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}
func (m *SendTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}
func (m *SendTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}
func (m *SendTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}
func (m *SendTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}
func (m *SendTx) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}
func (m *SendTx) GetAction() uint64 {
	if m != nil {
		return m.Action
	}
	return 0
}
func (m *SendTx) GetVote() []*Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}
func (m *SendTx) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}
func (m *SendTx) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}
func (m *SendTx) GetAssetInfo() *SendTxAssetInfo {
	if m != nil {
		return m.AssetInfo
	}
	return nil
}
func (m *SendTx) GetSubAddress() string {
	if m != nil {
		return m.SubAddress
	}
	return ""
}
func (m *SendTx) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}
func init() {
	proto.RegisterType((*AccountsRequest)(nil), "utils.AccountsRequest")
	proto.RegisterType((*AccountsReply)(nil), "utils.AccountsReply")
	proto.RegisterType((*TransactionRequest)(nil), "utils.TransactionRequest")
	proto.RegisterType((*RpcTransaction)(nil), "utils.RpcTransaction")
	proto.RegisterType((*Transaction)(nil), "utils.Transaction")
	proto.RegisterType((*TxData)(nil), "utils.TxData")
	proto.RegisterType((*Vote)(nil), "utils.Vote")
	proto.RegisterType((*SendTxAssetInfo)(nil), "utils.SendTxAssetInfo")
	proto.RegisterType((*AssetInfo)(nil), "utils.AssetInfo")
	proto.RegisterType((*SendTx)(nil), "utils.SendTx")
}
func init() {
	proto.RegisterFile("github.com/Aurorachain/go-aoa/internal/grpc/utils/common.proto", fileDescriptor_23eeae889888c9b6)
}
var fileDescriptor_23eeae889888c9b6 = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcf, 0x8f, 0xe3, 0x34,
	0x14, 0xc7, 0x95, 0x49, 0x9a, 0x99, 0xbc, 0xa6, 0x3f, 0xc6, 0x2c, 0x23, 0x0b, 0xad, 0x96, 0x12,
	0x09, 0xa9, 0x02, 0xd1, 0x8a, 0x59, 0xce, 0x48, 0xb3, 0x20, 0xc1, 0x4a, 0x68, 0x85, 0xc2, 0x88,
	0x03, 0x27, 0xdc, 0xd4, 0xdb, 0xb1, 0xb6, 0xb1, 0x43, 0xec, 0x8c, 0x66, 0xe0, 0xc8, 0x3f, 0xc0,
	0x15, 0xae, 0xfc, 0xa3, 0xc8, 0xcf, 0x6e, 0x92, 0xb6, 0xd3, 0x03, 0x7b, 0xf3, 0xf7, 0xb9, 0x7d,
	0xef, 0xd5, 0xef, 0xf3, 0xbe, 0x2a, 0x7c, 0xbd, 0x11, 0xe6, 0xae, 0x59, 0x2d, 0x0a, 0x55, 0x2e,
	0x6f, 0x9a, 0x5a, 0xd5, 0xac, 0xb8, 0x63, 0x42, 0x2e, 0x37, 0xea, 0x0b, 0xa6, 0xd8, 0x52, 0x48,
	0xc3, 0x6b, 0xc9, 0xb6, 0xcb, 0x4d, 0x5d, 0x15, 0xcb, 0xc6, 0x88, 0xad, 0x5e, 0x16, 0xaa, 0x2c,
	0x95, 0x5c, 0x54, 0xb5, 0x32, 0x8a, 0x0c, 0x30, 0x96, 0x5d, 0xc2, 0xe4, 0xa6, 0x28, 0x54, 0x23,
	0x8d, 0xce, 0xf9, 0x6f, 0x0d, 0xd7, 0x26, 0xfb, 0x1c, 0x46, 0x5d, 0xa8, 0xda, 0x3e, 0x92, 0x8f,
	0xe0, 0x82, 0xf9, 0x00, 0x0d, 0x66, 0xe1, 0x3c, 0xc9, 0x5b, 0x9d, 0xfd, 0x0a, 0xe4, 0xb6, 0x66,
	0x52, 0xb3, 0xc2, 0x08, 0x25, 0x7d, 0x0a, 0x32, 0x83, 0xe1, 0x6a, 0xab, 0x8a, 0x77, 0x6f, 0x9a,
	0x72, 0xc5, 0x6b, 0x1a, 0xcc, 0x82, 0x79, 0x98, 0xf7, 0x43, 0x84, 0x40, 0x74, 0xc7, 0xf4, 0x1d,
	0x3d, 0x9b, 0x05, 0xf3, 0x24, 0xc7, 0x33, 0x79, 0x06, 0x03, 0x21, 0xd7, 0xfc, 0x81, 0x86, 0xb3,
	0x60, 0x1e, 0xe7, 0x4e, 0x64, 0xff, 0x46, 0x30, 0xce, 0xab, 0xa2, 0x57, 0x85, 0x3c, 0x87, 0x04,
	0x73, 0x7d, 0x6f, 0x33, 0x04, 0x98, 0xa1, 0x0b, 0x1c, 0x16, 0xb7, 0x15, 0xd2, 0xa3, 0xe2, 0x6f,
	0x6b, 0x55, 0x62, 0x9d, 0x24, 0xc7, 0x33, 0x99, 0x42, 0xf8, 0x1d, 0xd3, 0x34, 0xc2, 0xd2, 0xe1,
	0x86, 0x69, 0xfb, 0xb3, 0x37, 0x4c, 0xff, 0x58, 0x8b, 0x82, 0xd3, 0x01, 0x26, 0x69, 0x75, 0xdb,
	0x7e, 0x7c, 0xd8, 0x7e, 0xd5, 0x18, 0x7a, 0x8e, 0x1f, 0x76, 0xc2, 0x46, 0xa5, 0x92, 0x05, 0xa7,
	0x17, 0xee, 0x47, 0xa1, 0x20, 0x63, 0x38, 0x33, 0x8a, 0x26, 0xf8, 0xed, 0x33, 0xa3, 0xc8, 0x67,
	0x30, 0xed, 0xfd, 0xc0, 0xd7, 0xf8, 0x0a, 0x80, 0x5f, 0x98, 0x9a, 0x83, 0xb8, 0xcd, 0x78, 0xcf,
	0xb6, 0x0d, 0xa7, 0x43, 0x57, 0x07, 0x05, 0x49, 0x21, 0xb8, 0xa7, 0x29, 0x46, 0x82, 0x7b, 0xab,
	0x6a, 0x3a, 0x72, 0xaa, 0xb6, 0x4a, 0xd3, 0xb1, 0x53, 0x9a, 0x5c, 0x41, 0xec, 0xd2, 0xd1, 0x09,
	0x56, 0xf0, 0x8a, 0x7c, 0x02, 0x83, 0x7b, 0x65, 0xb8, 0xa6, 0xd3, 0x59, 0x38, 0x1f, 0x5e, 0x0f,
	0x17, 0x48, 0xc8, 0xe2, 0x67, 0x65, 0x78, 0xee, 0x6e, 0xec, 0x93, 0x48, 0x51, 0xbc, 0x93, 0xac,
	0xe4, 0xf4, 0x12, 0x9b, 0x6f, 0xb5, 0x6d, 0x8b, 0x69, 0xcd, 0x0d, 0x25, 0x78, 0xe1, 0x04, 0xf9,
	0x0a, 0x12, 0x3c, 0xbc, 0x96, 0x6f, 0x15, 0xfd, 0x60, 0x16, 0xcc, 0x87, 0xd7, 0x57, 0x3e, 0xf1,
	0x4f, 0x5c, 0xae, 0x6f, 0x1f, 0x6e, 0x76, 0xb7, 0x79, 0xf7, 0x41, 0xf2, 0x02, 0x40, 0x37, 0xab,
	0x9b, 0xf5, 0xba, 0xe6, 0x5a, 0xd3, 0x67, 0x98, 0xb0, 0x17, 0xb1, 0xc3, 0x62, 0x2b, 0x41, 0x3f,
	0xc4, 0x0b, 0x7b, 0xcc, 0xfe, 0x0a, 0x60, 0xd8, 0x47, 0xe4, 0x53, 0x88, 0xcd, 0xc3, 0xb7, 0xcc,
	0x30, 0xe4, 0x63, 0x78, 0x3d, 0xf2, 0x45, 0x6f, 0x31, 0x98, 0xfb, 0xcb, 0x27, 0x31, 0x24, 0x10,
	0x69, 0xf1, 0x3b, 0x47, 0x3a, 0xc2, 0x1c, 0xcf, 0x2d, 0x31, 0x51, 0x8f, 0x98, 0x17, 0x00, 0x42,
	0x7f, 0xa3, 0xa4, 0xa9, 0x59, 0x61, 0x90, 0x90, 0x8b, 0xbc, 0x17, 0xc9, 0xfe, 0x09, 0x21, 0x76,
	0xe5, 0x48, 0x06, 0xa9, 0xdf, 0x98, 0x37, 0xc8, 0x42, 0x80, 0x0f, 0xbf, 0x17, 0xb3, 0xef, 0x57,
	0x21, 0x6b, 0x0e, 0x58, 0x27, 0x3c, 0x84, 0x3f, 0x88, 0x52, 0x18, 0xbf, 0x16, 0xad, 0xb6, 0x6b,
	0x50, 0xf3, 0x42, 0x54, 0x82, 0x4b, 0xe3, 0x3b, 0xeb, 0x02, 0x38, 0xe6, 0xd2, 0xa6, 0xf7, 0xf0,
	0x7a, 0x45, 0x28, 0x9c, 0x57, 0xec, 0x71, 0xab, 0xd8, 0x1a, 0xe9, 0x4d, 0xf3, 0x9d, 0xec, 0x81,
	0x71, 0xbe, 0x07, 0x06, 0x81, 0xc8, 0x8e, 0x1f, 0x09, 0x4e, 0x73, 0x3c, 0xef, 0x91, 0x90, 0xb8,
	0xe5, 0x38, 0x26, 0x01, 0xfa, 0x24, 0x3c, 0xef, 0x93, 0xe0, 0xd0, 0x3d, 0x39, 0xf1, 0xf4, 0xd4,
	0xc4, 0x47, 0xed, 0xc4, 0x1d, 0xf0, 0xe3, 0x3d, 0xe0, 0x27, 0x7b, 0xc0, 0x4f, 0x77, 0xc0, 0xef,
	0x86, 0x7c, 0xd9, 0x0d, 0x39, 0x7b, 0x05, 0x91, 0x05, 0xdb, 0x76, 0x55, 0x30, 0xb9, 0x16, 0x6b,
	0x66, 0xf8, 0xce, 0x4a, 0xda, 0x80, 0xbd, 0x55, 0x15, 0xaf, 0x19, 0x3e, 0x8a, 0x9d, 0xcb, 0x79,
	0xde, 0x05, 0xb2, 0xbf, 0x03, 0x98, 0x1c, 0x40, 0x6c, 0x6b, 0xe1, 0x9b, 0xb8, 0x54, 0x78, 0xb6,
	0xef, 0xaa, 0x1f, 0xcb, 0x95, 0xda, 0x7a, 0xcc, 0xbc, 0xc2, 0x78, 0x53, 0x55, 0xdb, 0x47, 0x9c,
	0x6c, 0x9a, 0x7b, 0x65, 0x73, 0xac, 0xb9, 0x2e, 0x76, 0xb0, 0xd9, 0x33, 0x59, 0xf4, 0x5f, 0x6f,
	0x80, 0x48, 0x4f, 0x3d, 0xd2, 0x4f, 0x6d, 0x50, 0xf6, 0x07, 0x24, 0x5d, 0x53, 0x57, 0x10, 0x0b,
	0xad, 0x1b, 0xef, 0xc4, 0x49, 0xee, 0x55, 0xdb, 0xec, 0xd9, 0x93, 0xcd, 0x86, 0x27, 0x9a, 0x8d,
	0x9e, 0x6c, 0x76, 0xd0, 0x35, 0x9b, 0xfd, 0x19, 0x42, 0xec, 0x1e, 0xa6, 0x5d, 0x9c, 0xa0, 0xb7,
	0x38, 0xce, 0xfc, 0xce, 0x5a, 0xf3, 0x9b, 0x82, 0xf5, 0x5b, 0x8f, 0xf7, 0x91, 0xf5, 0x46, 0x07,
	0xd6, 0xdb, 0xda, 0xdf, 0xa0, 0x6f, 0x7f, 0xad, 0xcd, 0xc6, 0x7d, 0x9b, 0xb5, 0xcd, 0x59, 0x0f,
	0x70, 0x8e, 0x8c, 0xe7, 0xce, 0xa6, 0x2f, 0xfa, 0x36, 0xdd, 0xb1, 0x9f, 0xec, 0xb1, 0xff, 0xb1,
	0x67, 0x1f, 0x8e, 0x3d, 0xf1, 0x78, 0x11, 0x86, 0xa7, 0x2c, 0x31, 0x3d, 0x69, 0x89, 0xa3, 0xf7,
	0xb3, 0xc4, 0xf1, 0xa9, 0x05, 0x99, 0xb4, 0x0b, 0xf2, 0xea, 0xe5, 0x2f, 0x5f, 0xfe, 0xef, 0xff,
	0x08, 0xab, 0x18, 0xff, 0x1d, 0xbc, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x45, 0xb1, 0xfe,
	0x5f, 0x08, 0x00, 0x00,
}
